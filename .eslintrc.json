{
  "env": {
    "browser": true,
    "es2021": true
  },
  "extends": [
    "next/core-web-vitals",
    "eslint:recommended",
    "plugin:@typescript-eslint/recommended",
    "plugin:react/recommended",
    "prettier"
  ],
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "ecmaVersion": "latest",
    "sourceType": "module"
  },
  "plugins": [
    "@typescript-eslint",
    "react"
  ],
  "rules": {
    /* Regras de React */
    "react/react-in-jsx-scope": "off", // Desnecessário no Next.js
    "react/prop-types": "off", // Não relevante ao usar TypeScript
    "react/no-unescaped-entities": "warn", // Evitar caracteres não escapados em JSX
    "react/jsx-uses-react": "off", // Desnecessário no Next.js
    "react/jsx-uses-vars": "error", // Evitar variáveis JSX não usadas
    /* Regras de Hooks */
    "react-hooks/rules-of-hooks": "error", // Regras de validação para hooks
    "react-hooks/exhaustive-deps": "warn", // Dependências dos efeitos
    /* Regras de TypeScript */
    "@typescript-eslint/no-unused-vars": [
      "warn",
      {
        "argsIgnorePattern": "^_"
      }
    ], // Ignorar variáveis prefixadas com _
    "@typescript-eslint/explicit-function-return-type": "off", // Deixe o TypeScript inferir os tipos
    "@typescript-eslint/no-explicit-any": "warn", // Evitar o uso de `any`
    "@typescript-eslint/ban-ts-comment": "warn", // Avisar sobre @ts-ignore
    /* Outras boas práticas */
    "no-console": "warn", // Avisar sobre console.log em produção
    "no-debugger": "error", // Evitar debugger
    "no-unused-vars": "off", // Desativar em favor do @typescript-eslint
    "eqeqeq": [
      "error",
      "always"
    ], // Exigir comparações estritas
    "prefer-const": "warn", // Sugerir uso de const quando aplicável
    "no-var": "error" // Proibir var
  }
}